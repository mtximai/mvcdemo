'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.42000
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.ComponentModel
Imports System.Data
Imports System.Diagnostics
Imports System.Web.Services
Imports System.Web.Services.Protocols
Imports System.Xml.Serialization

'
'This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.42000.
'
Namespace WR1
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1085.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Web.Services.WebServiceBindingAttribute(Name:="SharePointWSSoap", [Namespace]:="http://tempuri.org/")>  _
    Partial Public Class SharePointWS
        Inherits System.Web.Services.Protocols.SoapHttpClientProtocol
        
        Private CarregarItensOperationCompleted As System.Threading.SendOrPostCallback
        
        Private AdicionarItemPorURLOperationCompleted As System.Threading.SendOrPostCallback
        
        Private AdicionarItemPorFileStreamOperationCompleted As System.Threading.SendOrPostCallback
        
        Private RemoverItemOperationCompleted As System.Threading.SendOrPostCallback
        
        Private RemoverItemPorNomeOperationCompleted As System.Threading.SendOrPostCallback
        
        Private AtualizarMetaDadosOperationCompleted As System.Threading.SendOrPostCallback
        
        Private AtualizarMetaDadosPorNomeOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ListarOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ListarTodosOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetFileOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetURLFileOperationCompleted As System.Threading.SendOrPostCallback
        
        Private useDefaultCredentialsSetExplicitly As Boolean
        
        '''<remarks/>
        Public Sub New()
            MyBase.New
            Me.Url = Global.MvcDemo.My.MySettings.Default.MvcDemo_WebReference_SharePointWS
            If (Me.IsLocalFileSystemWebService(Me.Url) = true) Then
                Me.UseDefaultCredentials = true
                Me.useDefaultCredentialsSetExplicitly = false
            Else
                Me.useDefaultCredentialsSetExplicitly = true
            End If
        End Sub
        
        Public Shadows Property Url() As String
            Get
                Return MyBase.Url
            End Get
            Set
                If (((Me.IsLocalFileSystemWebService(MyBase.Url) = true)  _
                            AndAlso (Me.useDefaultCredentialsSetExplicitly = false))  _
                            AndAlso (Me.IsLocalFileSystemWebService(value) = false)) Then
                    MyBase.UseDefaultCredentials = false
                End If
                MyBase.Url = value
            End Set
        End Property
        
        Public Shadows Property UseDefaultCredentials() As Boolean
            Get
                Return MyBase.UseDefaultCredentials
            End Get
            Set
                MyBase.UseDefaultCredentials = value
                Me.useDefaultCredentialsSetExplicitly = true
            End Set
        End Property
        
        '''<remarks/>
        Public Event CarregarItensCompleted As CarregarItensCompletedEventHandler
        
        '''<remarks/>
        Public Event AdicionarItemPorURLCompleted As AdicionarItemPorURLCompletedEventHandler
        
        '''<remarks/>
        Public Event AdicionarItemPorFileStreamCompleted As AdicionarItemPorFileStreamCompletedEventHandler
        
        '''<remarks/>
        Public Event RemoverItemCompleted As RemoverItemCompletedEventHandler
        
        '''<remarks/>
        Public Event RemoverItemPorNomeCompleted As RemoverItemPorNomeCompletedEventHandler
        
        '''<remarks/>
        Public Event AtualizarMetaDadosCompleted As AtualizarMetaDadosCompletedEventHandler
        
        '''<remarks/>
        Public Event AtualizarMetaDadosPorNomeCompleted As AtualizarMetaDadosPorNomeCompletedEventHandler
        
        '''<remarks/>
        Public Event ListarCompleted As ListarCompletedEventHandler
        
        '''<remarks/>
        Public Event ListarTodosCompleted As ListarTodosCompletedEventHandler
        
        '''<remarks/>
        Public Event GetFileCompleted As GetFileCompletedEventHandler
        
        '''<remarks/>
        Public Event GetURLFileCompleted As GetURLFileCompletedEventHandler
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CarregarItens", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function CarregarItens(ByVal URLSite As String, ByVal NomeLista As String, ByVal Restricoes() As String, ByVal Servidor As String, ByVal Porta As String) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("CarregarItens", New Object() {URLSite, NomeLista, Restricoes, Servidor, Porta})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub CarregarItensAsync(ByVal URLSite As String, ByVal NomeLista As String, ByVal Restricoes() As String, ByVal Servidor As String, ByVal Porta As String)
            Me.CarregarItensAsync(URLSite, NomeLista, Restricoes, Servidor, Porta, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CarregarItensAsync(ByVal URLSite As String, ByVal NomeLista As String, ByVal Restricoes() As String, ByVal Servidor As String, ByVal Porta As String, ByVal userState As Object)
            If (Me.CarregarItensOperationCompleted Is Nothing) Then
                Me.CarregarItensOperationCompleted = AddressOf Me.OnCarregarItensOperationCompleted
            End If
            Me.InvokeAsync("CarregarItens", New Object() {URLSite, NomeLista, Restricoes, Servidor, Porta}, Me.CarregarItensOperationCompleted, userState)
        End Sub
        
        Private Sub OnCarregarItensOperationCompleted(ByVal arg As Object)
            If (Not (Me.CarregarItensCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CarregarItensCompleted(Me, New CarregarItensCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AdicionarItemPorURL", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function AdicionarItemPorURL(ByVal URLSite As String, ByVal Servidor As String, ByVal Porta As String, ByVal NomeLista As String, ByVal NomeArquivo As String, ByVal URLArquivoOrigem As String, ByVal MetaDados() As String) As Boolean
            Dim results() As Object = Me.Invoke("AdicionarItemPorURL", New Object() {URLSite, Servidor, Porta, NomeLista, NomeArquivo, URLArquivoOrigem, MetaDados})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub AdicionarItemPorURLAsync(ByVal URLSite As String, ByVal Servidor As String, ByVal Porta As String, ByVal NomeLista As String, ByVal NomeArquivo As String, ByVal URLArquivoOrigem As String, ByVal MetaDados() As String)
            Me.AdicionarItemPorURLAsync(URLSite, Servidor, Porta, NomeLista, NomeArquivo, URLArquivoOrigem, MetaDados, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AdicionarItemPorURLAsync(ByVal URLSite As String, ByVal Servidor As String, ByVal Porta As String, ByVal NomeLista As String, ByVal NomeArquivo As String, ByVal URLArquivoOrigem As String, ByVal MetaDados() As String, ByVal userState As Object)
            If (Me.AdicionarItemPorURLOperationCompleted Is Nothing) Then
                Me.AdicionarItemPorURLOperationCompleted = AddressOf Me.OnAdicionarItemPorURLOperationCompleted
            End If
            Me.InvokeAsync("AdicionarItemPorURL", New Object() {URLSite, Servidor, Porta, NomeLista, NomeArquivo, URLArquivoOrigem, MetaDados}, Me.AdicionarItemPorURLOperationCompleted, userState)
        End Sub
        
        Private Sub OnAdicionarItemPorURLOperationCompleted(ByVal arg As Object)
            If (Not (Me.AdicionarItemPorURLCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AdicionarItemPorURLCompleted(Me, New AdicionarItemPorURLCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AdicionarItemPorFileStream", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function AdicionarItemPorFileStream(ByVal URLSite As String, ByVal Servidor As String, ByVal Porta As String, ByVal NomeLista As String, ByVal NomeArquivo As String, <System.Xml.Serialization.XmlElementAttribute(DataType:="base64Binary")> ByVal ArquivoOrigemEmBytes() As Byte, ByVal NomeCampoChave As String, ByVal ValorCampoChave As String, ByVal MetaDados() As String, ByVal CampoChaveEhBDC As Boolean) As Boolean
            Dim results() As Object = Me.Invoke("AdicionarItemPorFileStream", New Object() {URLSite, Servidor, Porta, NomeLista, NomeArquivo, ArquivoOrigemEmBytes, NomeCampoChave, ValorCampoChave, MetaDados, CampoChaveEhBDC})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub AdicionarItemPorFileStreamAsync(ByVal URLSite As String, ByVal Servidor As String, ByVal Porta As String, ByVal NomeLista As String, ByVal NomeArquivo As String, ByVal ArquivoOrigemEmBytes() As Byte, ByVal NomeCampoChave As String, ByVal ValorCampoChave As String, ByVal MetaDados() As String, ByVal CampoChaveEhBDC As Boolean)
            Me.AdicionarItemPorFileStreamAsync(URLSite, Servidor, Porta, NomeLista, NomeArquivo, ArquivoOrigemEmBytes, NomeCampoChave, ValorCampoChave, MetaDados, CampoChaveEhBDC, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AdicionarItemPorFileStreamAsync(ByVal URLSite As String, ByVal Servidor As String, ByVal Porta As String, ByVal NomeLista As String, ByVal NomeArquivo As String, ByVal ArquivoOrigemEmBytes() As Byte, ByVal NomeCampoChave As String, ByVal ValorCampoChave As String, ByVal MetaDados() As String, ByVal CampoChaveEhBDC As Boolean, ByVal userState As Object)
            If (Me.AdicionarItemPorFileStreamOperationCompleted Is Nothing) Then
                Me.AdicionarItemPorFileStreamOperationCompleted = AddressOf Me.OnAdicionarItemPorFileStreamOperationCompleted
            End If
            Me.InvokeAsync("AdicionarItemPorFileStream", New Object() {URLSite, Servidor, Porta, NomeLista, NomeArquivo, ArquivoOrigemEmBytes, NomeCampoChave, ValorCampoChave, MetaDados, CampoChaveEhBDC}, Me.AdicionarItemPorFileStreamOperationCompleted, userState)
        End Sub
        
        Private Sub OnAdicionarItemPorFileStreamOperationCompleted(ByVal arg As Object)
            If (Not (Me.AdicionarItemPorFileStreamCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AdicionarItemPorFileStreamCompleted(Me, New AdicionarItemPorFileStreamCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/RemoverItem", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function RemoverItem(ByVal URLSite As String, ByVal Servidor As String, ByVal Porta As String, ByVal NomeLista As String, ByVal NomeArquivo As String, ByVal NomeCampoChave As String, ByVal ValorCampoChave As String, ByVal CampoChaveEhBDC As Boolean) As Boolean
            Dim results() As Object = Me.Invoke("RemoverItem", New Object() {URLSite, Servidor, Porta, NomeLista, NomeArquivo, NomeCampoChave, ValorCampoChave, CampoChaveEhBDC})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub RemoverItemAsync(ByVal URLSite As String, ByVal Servidor As String, ByVal Porta As String, ByVal NomeLista As String, ByVal NomeArquivo As String, ByVal NomeCampoChave As String, ByVal ValorCampoChave As String, ByVal CampoChaveEhBDC As Boolean)
            Me.RemoverItemAsync(URLSite, Servidor, Porta, NomeLista, NomeArquivo, NomeCampoChave, ValorCampoChave, CampoChaveEhBDC, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub RemoverItemAsync(ByVal URLSite As String, ByVal Servidor As String, ByVal Porta As String, ByVal NomeLista As String, ByVal NomeArquivo As String, ByVal NomeCampoChave As String, ByVal ValorCampoChave As String, ByVal CampoChaveEhBDC As Boolean, ByVal userState As Object)
            If (Me.RemoverItemOperationCompleted Is Nothing) Then
                Me.RemoverItemOperationCompleted = AddressOf Me.OnRemoverItemOperationCompleted
            End If
            Me.InvokeAsync("RemoverItem", New Object() {URLSite, Servidor, Porta, NomeLista, NomeArquivo, NomeCampoChave, ValorCampoChave, CampoChaveEhBDC}, Me.RemoverItemOperationCompleted, userState)
        End Sub
        
        Private Sub OnRemoverItemOperationCompleted(ByVal arg As Object)
            If (Not (Me.RemoverItemCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent RemoverItemCompleted(Me, New RemoverItemCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/RemoverItemPorNome", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function RemoverItemPorNome(ByVal URLSite As String, ByVal Servidor As String, ByVal Porta As String, ByVal NomeLista As String, ByVal NomeArquivo As String) As Boolean
            Dim results() As Object = Me.Invoke("RemoverItemPorNome", New Object() {URLSite, Servidor, Porta, NomeLista, NomeArquivo})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub RemoverItemPorNomeAsync(ByVal URLSite As String, ByVal Servidor As String, ByVal Porta As String, ByVal NomeLista As String, ByVal NomeArquivo As String)
            Me.RemoverItemPorNomeAsync(URLSite, Servidor, Porta, NomeLista, NomeArquivo, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub RemoverItemPorNomeAsync(ByVal URLSite As String, ByVal Servidor As String, ByVal Porta As String, ByVal NomeLista As String, ByVal NomeArquivo As String, ByVal userState As Object)
            If (Me.RemoverItemPorNomeOperationCompleted Is Nothing) Then
                Me.RemoverItemPorNomeOperationCompleted = AddressOf Me.OnRemoverItemPorNomeOperationCompleted
            End If
            Me.InvokeAsync("RemoverItemPorNome", New Object() {URLSite, Servidor, Porta, NomeLista, NomeArquivo}, Me.RemoverItemPorNomeOperationCompleted, userState)
        End Sub
        
        Private Sub OnRemoverItemPorNomeOperationCompleted(ByVal arg As Object)
            If (Not (Me.RemoverItemPorNomeCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent RemoverItemPorNomeCompleted(Me, New RemoverItemPorNomeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AtualizarMetaDados", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function AtualizarMetaDados(ByVal URLSite As String, ByVal Servidor As String, ByVal Porta As String, ByVal NomeLista As String, ByVal NomeCampoChave As String, ByVal ValorCampoChave As String, ByVal CampoChaveEhBDC As Boolean, ByVal MetaDados() As String) As Boolean
            Dim results() As Object = Me.Invoke("AtualizarMetaDados", New Object() {URLSite, Servidor, Porta, NomeLista, NomeCampoChave, ValorCampoChave, CampoChaveEhBDC, MetaDados})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub AtualizarMetaDadosAsync(ByVal URLSite As String, ByVal Servidor As String, ByVal Porta As String, ByVal NomeLista As String, ByVal NomeCampoChave As String, ByVal ValorCampoChave As String, ByVal CampoChaveEhBDC As Boolean, ByVal MetaDados() As String)
            Me.AtualizarMetaDadosAsync(URLSite, Servidor, Porta, NomeLista, NomeCampoChave, ValorCampoChave, CampoChaveEhBDC, MetaDados, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AtualizarMetaDadosAsync(ByVal URLSite As String, ByVal Servidor As String, ByVal Porta As String, ByVal NomeLista As String, ByVal NomeCampoChave As String, ByVal ValorCampoChave As String, ByVal CampoChaveEhBDC As Boolean, ByVal MetaDados() As String, ByVal userState As Object)
            If (Me.AtualizarMetaDadosOperationCompleted Is Nothing) Then
                Me.AtualizarMetaDadosOperationCompleted = AddressOf Me.OnAtualizarMetaDadosOperationCompleted
            End If
            Me.InvokeAsync("AtualizarMetaDados", New Object() {URLSite, Servidor, Porta, NomeLista, NomeCampoChave, ValorCampoChave, CampoChaveEhBDC, MetaDados}, Me.AtualizarMetaDadosOperationCompleted, userState)
        End Sub
        
        Private Sub OnAtualizarMetaDadosOperationCompleted(ByVal arg As Object)
            If (Not (Me.AtualizarMetaDadosCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AtualizarMetaDadosCompleted(Me, New AtualizarMetaDadosCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AtualizarMetaDadosPorNome", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function AtualizarMetaDadosPorNome(ByVal URLSite As String, ByVal Servidor As String, ByVal Porta As String, ByVal NomeLista As String, ByVal NomeArquivo As String, ByVal MetaDados() As String) As Boolean
            Dim results() As Object = Me.Invoke("AtualizarMetaDadosPorNome", New Object() {URLSite, Servidor, Porta, NomeLista, NomeArquivo, MetaDados})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub AtualizarMetaDadosPorNomeAsync(ByVal URLSite As String, ByVal Servidor As String, ByVal Porta As String, ByVal NomeLista As String, ByVal NomeArquivo As String, ByVal MetaDados() As String)
            Me.AtualizarMetaDadosPorNomeAsync(URLSite, Servidor, Porta, NomeLista, NomeArquivo, MetaDados, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AtualizarMetaDadosPorNomeAsync(ByVal URLSite As String, ByVal Servidor As String, ByVal Porta As String, ByVal NomeLista As String, ByVal NomeArquivo As String, ByVal MetaDados() As String, ByVal userState As Object)
            If (Me.AtualizarMetaDadosPorNomeOperationCompleted Is Nothing) Then
                Me.AtualizarMetaDadosPorNomeOperationCompleted = AddressOf Me.OnAtualizarMetaDadosPorNomeOperationCompleted
            End If
            Me.InvokeAsync("AtualizarMetaDadosPorNome", New Object() {URLSite, Servidor, Porta, NomeLista, NomeArquivo, MetaDados}, Me.AtualizarMetaDadosPorNomeOperationCompleted, userState)
        End Sub
        
        Private Sub OnAtualizarMetaDadosPorNomeOperationCompleted(ByVal arg As Object)
            If (Not (Me.AtualizarMetaDadosPorNomeCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AtualizarMetaDadosPorNomeCompleted(Me, New AtualizarMetaDadosPorNomeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Listar", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function Listar(ByVal URLSite As String, ByVal Servidor As String, ByVal Porta As String, ByVal NomeLista As String, ByVal NomeCampoPesquisa As String, ByVal ValorCampoPesquisa As String, ByVal CampoChaveEhBDC As Boolean) As System.Data.DataTable
            Dim results() As Object = Me.Invoke("Listar", New Object() {URLSite, Servidor, Porta, NomeLista, NomeCampoPesquisa, ValorCampoPesquisa, CampoChaveEhBDC})
            Return CType(results(0),System.Data.DataTable)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ListarAsync(ByVal URLSite As String, ByVal Servidor As String, ByVal Porta As String, ByVal NomeLista As String, ByVal NomeCampoPesquisa As String, ByVal ValorCampoPesquisa As String, ByVal CampoChaveEhBDC As Boolean)
            Me.ListarAsync(URLSite, Servidor, Porta, NomeLista, NomeCampoPesquisa, ValorCampoPesquisa, CampoChaveEhBDC, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ListarAsync(ByVal URLSite As String, ByVal Servidor As String, ByVal Porta As String, ByVal NomeLista As String, ByVal NomeCampoPesquisa As String, ByVal ValorCampoPesquisa As String, ByVal CampoChaveEhBDC As Boolean, ByVal userState As Object)
            If (Me.ListarOperationCompleted Is Nothing) Then
                Me.ListarOperationCompleted = AddressOf Me.OnListarOperationCompleted
            End If
            Me.InvokeAsync("Listar", New Object() {URLSite, Servidor, Porta, NomeLista, NomeCampoPesquisa, ValorCampoPesquisa, CampoChaveEhBDC}, Me.ListarOperationCompleted, userState)
        End Sub
        
        Private Sub OnListarOperationCompleted(ByVal arg As Object)
            If (Not (Me.ListarCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ListarCompleted(Me, New ListarCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ListarTodos", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ListarTodos(ByVal URLSite As String, ByVal Servidor As String, ByVal Porta As String, ByVal NomeLista As String) As System.Data.DataTable
            Dim results() As Object = Me.Invoke("ListarTodos", New Object() {URLSite, Servidor, Porta, NomeLista})
            Return CType(results(0),System.Data.DataTable)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ListarTodosAsync(ByVal URLSite As String, ByVal Servidor As String, ByVal Porta As String, ByVal NomeLista As String)
            Me.ListarTodosAsync(URLSite, Servidor, Porta, NomeLista, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ListarTodosAsync(ByVal URLSite As String, ByVal Servidor As String, ByVal Porta As String, ByVal NomeLista As String, ByVal userState As Object)
            If (Me.ListarTodosOperationCompleted Is Nothing) Then
                Me.ListarTodosOperationCompleted = AddressOf Me.OnListarTodosOperationCompleted
            End If
            Me.InvokeAsync("ListarTodos", New Object() {URLSite, Servidor, Porta, NomeLista}, Me.ListarTodosOperationCompleted, userState)
        End Sub
        
        Private Sub OnListarTodosOperationCompleted(ByVal arg As Object)
            If (Not (Me.ListarTodosCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ListarTodosCompleted(Me, New ListarTodosCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetFile", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetFile(ByVal URLSite As String, ByVal Servidor As String, ByVal Porta As String, ByVal NomeLista As String, ByVal NomeArquivo As String, ByVal NomeCampoChave As String, ByVal ValorCampoChave As String) As String
            Dim results() As Object = Me.Invoke("GetFile", New Object() {URLSite, Servidor, Porta, NomeLista, NomeArquivo, NomeCampoChave, ValorCampoChave})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetFileAsync(ByVal URLSite As String, ByVal Servidor As String, ByVal Porta As String, ByVal NomeLista As String, ByVal NomeArquivo As String, ByVal NomeCampoChave As String, ByVal ValorCampoChave As String)
            Me.GetFileAsync(URLSite, Servidor, Porta, NomeLista, NomeArquivo, NomeCampoChave, ValorCampoChave, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetFileAsync(ByVal URLSite As String, ByVal Servidor As String, ByVal Porta As String, ByVal NomeLista As String, ByVal NomeArquivo As String, ByVal NomeCampoChave As String, ByVal ValorCampoChave As String, ByVal userState As Object)
            If (Me.GetFileOperationCompleted Is Nothing) Then
                Me.GetFileOperationCompleted = AddressOf Me.OnGetFileOperationCompleted
            End If
            Me.InvokeAsync("GetFile", New Object() {URLSite, Servidor, Porta, NomeLista, NomeArquivo, NomeCampoChave, ValorCampoChave}, Me.GetFileOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetFileOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetFileCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetFileCompleted(Me, New GetFileCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetURLFile", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetURLFile(ByVal URLSite As String, ByVal Servidor As String, ByVal Porta As String, ByVal NomeLista As String, ByVal NomeArquivo As String, ByVal NomeCampoChave As String, ByVal ValorCampoChave As String) As String
            Dim results() As Object = Me.Invoke("GetURLFile", New Object() {URLSite, Servidor, Porta, NomeLista, NomeArquivo, NomeCampoChave, ValorCampoChave})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetURLFileAsync(ByVal URLSite As String, ByVal Servidor As String, ByVal Porta As String, ByVal NomeLista As String, ByVal NomeArquivo As String, ByVal NomeCampoChave As String, ByVal ValorCampoChave As String)
            Me.GetURLFileAsync(URLSite, Servidor, Porta, NomeLista, NomeArquivo, NomeCampoChave, ValorCampoChave, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetURLFileAsync(ByVal URLSite As String, ByVal Servidor As String, ByVal Porta As String, ByVal NomeLista As String, ByVal NomeArquivo As String, ByVal NomeCampoChave As String, ByVal ValorCampoChave As String, ByVal userState As Object)
            If (Me.GetURLFileOperationCompleted Is Nothing) Then
                Me.GetURLFileOperationCompleted = AddressOf Me.OnGetURLFileOperationCompleted
            End If
            Me.InvokeAsync("GetURLFile", New Object() {URLSite, Servidor, Porta, NomeLista, NomeArquivo, NomeCampoChave, ValorCampoChave}, Me.GetURLFileOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetURLFileOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetURLFileCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetURLFileCompleted(Me, New GetURLFileCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        Public Shadows Sub CancelAsync(ByVal userState As Object)
            MyBase.CancelAsync(userState)
        End Sub
        
        Private Function IsLocalFileSystemWebService(ByVal url As String) As Boolean
            If ((url Is Nothing)  _
                        OrElse (url Is String.Empty)) Then
                Return false
            End If
            Dim wsUri As System.Uri = New System.Uri(url)
            If ((wsUri.Port >= 1024)  _
                        AndAlso (String.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) = 0)) Then
                Return true
            End If
            Return false
        End Function
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1085.0")>  _
    Public Delegate Sub CarregarItensCompletedEventHandler(ByVal sender As Object, ByVal e As CarregarItensCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1085.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CarregarItensCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1085.0")>  _
    Public Delegate Sub AdicionarItemPorURLCompletedEventHandler(ByVal sender As Object, ByVal e As AdicionarItemPorURLCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1085.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class AdicionarItemPorURLCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1085.0")>  _
    Public Delegate Sub AdicionarItemPorFileStreamCompletedEventHandler(ByVal sender As Object, ByVal e As AdicionarItemPorFileStreamCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1085.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class AdicionarItemPorFileStreamCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1085.0")>  _
    Public Delegate Sub RemoverItemCompletedEventHandler(ByVal sender As Object, ByVal e As RemoverItemCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1085.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class RemoverItemCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1085.0")>  _
    Public Delegate Sub RemoverItemPorNomeCompletedEventHandler(ByVal sender As Object, ByVal e As RemoverItemPorNomeCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1085.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class RemoverItemPorNomeCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1085.0")>  _
    Public Delegate Sub AtualizarMetaDadosCompletedEventHandler(ByVal sender As Object, ByVal e As AtualizarMetaDadosCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1085.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class AtualizarMetaDadosCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1085.0")>  _
    Public Delegate Sub AtualizarMetaDadosPorNomeCompletedEventHandler(ByVal sender As Object, ByVal e As AtualizarMetaDadosPorNomeCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1085.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class AtualizarMetaDadosPorNomeCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1085.0")>  _
    Public Delegate Sub ListarCompletedEventHandler(ByVal sender As Object, ByVal e As ListarCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1085.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ListarCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataTable
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataTable)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1085.0")>  _
    Public Delegate Sub ListarTodosCompletedEventHandler(ByVal sender As Object, ByVal e As ListarTodosCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1085.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ListarTodosCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataTable
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataTable)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1085.0")>  _
    Public Delegate Sub GetFileCompletedEventHandler(ByVal sender As Object, ByVal e As GetFileCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1085.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetFileCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1085.0")>  _
    Public Delegate Sub GetURLFileCompletedEventHandler(ByVal sender As Object, ByVal e As GetURLFileCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1085.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetURLFileCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
End Namespace
